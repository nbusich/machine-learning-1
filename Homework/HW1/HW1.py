import numpy as np

# Question 4
print("Question 4",'----------------------------------------------------------------------')
#----------------------------------------------------------------------
X = np.array([
    [  1,  7 ],
    [ -8,  6 ],
    [  3,  1 ]
])
Y = np.array([
    [  0,  4,  6, -8 ],
    [  1, -3,  5, 7 ],
    [ 11, 13,  9, 9 ],
    [ -1,  0,  8, 7 ]
])
Z = np.array([
    [  0,  4,  8,  1 ],
    [ -3,  5, 17, 11 ]
])
A = np.array([
    [ 1, 17 ],
    [ 2, 14 ]
])

b = np.array([19, -11, 13])
c = np.array([[12],
              [-11],
              [10]])

x = np.array([[1],
              [2],
              [3]])

y = np.array([3, 3, 1])

y = np.expand_dims(y, axis = 1)
y = y.T

b = np.expand_dims(b, axis = 1)
b = b.T

# 4.1 *******
#----------------------------------------------------------------------
print("\n\n4.1\n", x @ y @ y.T @ x.T)

# 4.2
#----------------------------------------------------------------------
print("\n\n4.2\n",3*c - 9)

# 4.3 ******
#----------------------------------------------------------------------
# Angled brackets represent inner product
print("\n\n4.3\n", np.trace(A @ A.T) * A)

# 4.4
#----------------------------------------------------------------------
print("\n\n4.4\n",2*(X@Z))

# 4.5
#----------------------------------------------------------------------
print("\n\n4.5\n",A*(b@c))

# 4.6
#----------------------------------------------------------------------
print("\n\n4.6\n",b@X@A)

# 4.7
#----------------------------------------------------------------------
# The circle with a dot in the middle represents hadamard product (elementwise)
print("\n\n4.7\n",c*x)

# 4.8
#----------------------------------------------------------------------
# The circle with a dot in the middle represents hadamard product (elementwise)
print("\n\n4.8\n",b*y)

# 4.9
#----------------------------------------------------------------------
# The circle with a cross in the middle represents outer product
print("\n\n 4.9 \n",np.outer(c,x))

# 4.10
#----------------------------------------------------------------------
# The circle with a cross in the middle represents outer product
print("\n\n4.10\n",Y @ Z.T)


# Question 5
#----------------------------------------------------------------------
X = np.array([[2,3],
              [9,1]])
Y = np.array([[1,0],
              [2,1]])
x = np.array([[1],
              [3]])
y = np.array([[2],
              [4]])
print("\n\nQuestion 5",'----------------------------------------------------------------------')

# 5.1
#----------------------------------------------------------------------
print("\n\n5.1\n",(X[:,0]))

# 5.2
#----------------------------------------------------------------------
print("\n\n5.2\n",(Y[1,:]))

# 5.3
#----------------------------------------------------------------------
print("\n\n5.3\n",(X[1,1]))

# 5.4
#----------------------------------------------------------------------
print("\n\n5.4\n",X+Y)

# 5.5
#----------------------------------------------------------------------
print("\n\n5.5\n",X + (Y@X))

# 5.6
#----------------------------------------------------------------------
print("\n\n5.6\n",x * y)

# 5.7
#----------------------------------------------------------------------
print("\n\n5.7\n", np.outer(x,y))

# 5.8
#----------------------------------------------------------------------
print("\n\n5.8\n", np.dot(X,Y))

# 5.9
#----------------------------------------------------------------------
print("\n\n5.9\n", np.inner(X,Y))


# Question 6
#----------------------------------------------------------------------
print("\n\nQuestion 6",'----------------------------------------------------------------------')
v = np.array([[5],[0],[0]])
w = np.array([[8],[1],[1]])
x = np.array([[3],[1],[2]])
y = np.array([[2],[1],[0],[3]])
z = np.array([[2],[5]])

# 6.1
#----------------------------------------------------------------------
print(f'\n\n v-norms: \n\t L0: {np.count_nonzero(v)} \n\t L1: {np.linalg.norm(v, ord = 1)} \n\t L2: {np.linalg.norm(v, ord = 2)} \n\t L-inf: {np.linalg.norm(v, ord = np.inf)}')
print(f'\n\n w-norms: \n\t L0: {np.count_nonzero(w)} \n\t L1: {np.linalg.norm(w, ord = 1)} \n\t L2: {np.linalg.norm(w, ord = 2)} \n\t L-inf: {np.linalg.norm(w, ord = np.inf)}')
print(f'\n\n x-norms: \n\t L0: {np.count_nonzero(x)} \n\t L1: {np.linalg.norm(x, ord = 1)} \n\t L2: {np.linalg.norm(x, ord = 2)} \n\t L-inf: {np.linalg.norm(x, ord = np.inf)}')
print(f'\n\n y-norms: \n\t L0: {np.count_nonzero(y)} \n\t L1: {np.linalg.norm(y, ord = 1)} \n\t L2: {np.linalg.norm(y, ord = 2)} \n\t L-inf: {np.linalg.norm(y, ord = np.inf)}')
print(f'\n\n z-norms: \n\t L0: {np.count_nonzero(z)} \n\t L1: {np.linalg.norm(z, ord = 1)} \n\t L2: {np.linalg.norm(z, ord = 2)} \n\t L-inf: {np.linalg.norm(z, ord = np.inf)}')


# Question 7
#----------------------------------------------------------------------
print("\n\nQuestion 7",'----------------------------------------------------------------------')

# 7.1
#----------------------------------------------------------------------
A = np.genfromtxt('hw1.csv', delimiter=',', dtype=int)
print(A)